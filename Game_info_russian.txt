Об игре

Два вида товаров
В игре есть два вида ресурсов (товаров): продукты и броня.

Три типа зданий
Здания - это точки интереса на игровой карте. Есть три типа зданий : город, рынок, склад.

enum PostType
{
    TOWN = 1,
    MARKET = 2,
    STORAGE = 3
}

Продукты
Этот тип ресурса (товаров) используется для поддержки населения города. За ход игры 1 поселенец съедает 1 продукт в городе.
Продукт можно добыть поездом на рынке (на карте этот объект обозначен как здание с типом MARKET).
Продукты иногда могут быть украдены паразитами (см. «вторжение паразитов»).

Броня
Этот тип ресурсов (товаров) используется для усиления защиты города от атаки бандитов (см. «Атака бандитов»).
Также броня может быть использована для улучшения юнитов (см .: «Улучшения»). Атака бандитов уменьшает броню в городе (1 бандит -> -1 броня).
Броня может быть добыта поездом на складе (на карте этот объект определен как здание с типом STORAGE).
Если у вас достаточно брони в городе - вы можете использовать ее для улучшения самого города или / и улучшения вашего поезда.

События
Иногда что-то может случиться в игре :).
Игрок будет уведомлен об этом с использованием событий.
Каждое событие связано с какой-либо игровой сущностью (город, поезд и т. д.).

В игре есть следующие типы событий:

enum EventType
{
    TRAIN_COLLISION = 1,
    HIJACKERS_ASSAULT = 2,
    PARASITES_ASSAULT = 3,
    REFUGEES_ARRIVAL = 4,
    RESOURCE_OVERFLOW = 5,
    RESOURCE_LACK = 6,
    GAME_OVER = 100
}



Вторжение паразитов
Это событие связано с городом.
Паразиты едят продукты в городе. Уменьшение продуктов равно количеству паразитов в событии.
Количество паразитов в одной атаке: [1…3].
Безопасное время (количество ходов) после атаки: 5 * (количество паразитов в последней атаке).

Пример: ответное сообщение MAP (для уровня 1) с событием «Вторжение паразитов»
{
    "idx": 1,
    "posts": [
        {
        "type": 1,
        "name": "Minsk",
        "events": [
            {
                "parasites_power": 3,
                "tick": 111,
                "type": 3
            }
        ],
        "product": 29,
        "product_capacity": 200,
        ...
        },
        ...
    ],
    ...
}

parasites_power - количество паразитов
tick - номер хода игры
type - тип события



Атака бандитов 
Это событие связано с городом.
Бандиты уничтожают броню в городе. Уменьшение брони равно количеству бандитов в событии.
Если количество брони в городе меньше, чем количество бандитов, то население этого города будет уменьшаться!
Количество бандитов в одной атаке: [1…3].
Безопасное время (количество ходов) после атаки: 5 * (количество бандитов в последней атаке).

Пример: ответное сообщение MAP (для уровня 1) с событием «Атака бандитов»
{
    "idx": 1,
    "posts": [
        {
        "type": 1,
        "name": "Minsk",
        "events": [
            {
                "hijackers_power": 2,
                "tick": 1,
                "type": 2
            }
        ],
        "product": 29,
        "product_capacity": 200,
        ...
        },
        ...
    ],
    ...
}

hijackers_power - количество бандитов
tick - номер хода игры
type - тип события



Прибытие беженцев
Это событие связано с городом.
Беженцы увеличивают население города. Прирост населения равен числу беженцев в событии.
Количество беженцев в одном событии: [1…3].
Безопасное время (количество ходов) после события: 5 * (количество беженцев в последнем событии).

Пример: ответное сообщение MAP (для уровня 1) с событием «Прибытие беженцев»
{
    "idx": 1,
    "posts": [
        {
        "type": 1,
        "name": "Minsk",
        "events": [
            {
                "refugees_number": 2,
                "tick": 1,
                "type": 4
            }
        ],
        "product": 29,
        "product_capacity": 200,
        ...
        },
        ...
    ],
    ...
}

refugees_number - количество беженцев
tick - номер хода игры
type - тип события



Крушение поезда
Это событие связано с поездом.
Если два или более поезда находятся в одной и той же позиции / точке  в одно и то же время - это авария!
Авария не может произойти в городе.
Все поезда, которые участвовали в аварии, будут возвращены в свои города, и все товары в поездах будут выброшены.
Поезд не может быть использован после аварии в течение некоторого периода времени (перезарядка), 
это время (количество ходов) зависит от уровня города.

Пример: ответное сообщение MAP (для уровня 1) с событием «Сбой поезда»
{
    "idx": 1,
    "trains": [
        {
            "events": [
                {
                    "tick": 2,
                    "train": 2,
                    "type": 1
                }
            ],
            "cooldown": 2,
            "fuel": 400,
            "fuel_capacity": 400,
            "fuel_consumption": 1,
            "goods": 0,
            "goods_capacity": 40,
            "goods_type": null,
            ...
        },
        ...
    ],
    ...
}
train - второй участник аварии
tick - номер хода игры
type - тип события



Улучшение
Игрок может улучшить свой город или поезд. Все улучшения оплачиваются броней.
Для запуска обновления клиент отправляет на сервер действие UPGRADE (это действие описано ниже).

Улучшение города
Что получает город в результате улучшения? Смотрите в следующей таблице:

Уровень	Численность населения(макс.)	Количество продуктов(макс.)     Количество брони(макс.)	Восстановление после аварии	Цена следующего уровня
1	    10	                            200	                            200	                    2	                        100
2	    20	                            500	                            500	                    1	                        200
3	    40	                            10000	                        10000	                0	                        Нет
Уровень 3 - это максимальный уровень города.


Улучшение поезда
Что получает поезд в результате апгрейда? Смотрите в следующей таблице:

Уровень	Грузоподъемность	Вместимость топливных баков	    Потребление топлива	    Цена следующего уровня
1	    40	                400	                            1	                    40
2	    80	                800	                            1	                    80
3	    160	                1600	                        1	                    Нет
Уровень 3 - это максимальный уровень поезда.


Рейтинг
Сервер пересчитывает значение рейтинга (игровой счет) на каждом ходу для каждого игрока.
Рейтинг можно найти на уровне MAP 1.

Расчетная формула:

RATING = <population> * 1000 + sum(<upgrade level cost>) * 2 + <town.product> + <town.armor>
Где:
<population> - current population in player's town (the value is multiplied by 1000)

sum(<upgrade level cost>) - sum of armor spent for all upgrades (train(s), town) (the value is multiplied by 2)

<town.product> + <town.armor> - sum of current amount of armor and product in player's town



_________________________________________________________________________________________________
_________________________________________________________________________________________________


Об игровом сервере

Клиент-серверные сообщения

Общий формат сообщения
Клиент отправляет на сервер некоторые сообщения «действия» и получает «ответные» сообщения. 
Порядок байтов: little-endian(вначале идут младшие биты числа).

Сообщение действие всегда начинается с кода действия (4 байта). 
Все возможные коды действий могут быть представлены перечислением (C ++):

enum Action
{
    LOGIN = 1,
    LOGOUT = 2,
    MOVE = 3,
    UPGRADE = 4,
    TURN = 5,
    PLAYER = 6,
    GAMES = 7,
    MAP = 10
}
Раздел данных следует за кодом действия.

Формат раздела данных :
{длина данных (4 байта)} + {байты строки UTF-8 с данными в формате JSON}

Клиент получает ответное сообщение как ответ от сервера. Ответное сообщение начинается с кода результата :
enum Result
{
    OKEY = 0,
    BAD_COMMAND = 1,
    RESOURCE_NOT_FOUND = 2,
    ACCESS_DENIED = 3,
    INAPPROPRIATE_GAME_STATE = 4,
    TIMEOUT = 5,
    INTERNAL_SERVER_ERROR = 500
}
Раздел данных "ответа" следует после кода результата.

Полный формат сообщения клиент-сервер :
{действие (4 байта)} + {длина данных (4 байта)} + {байты строки UTF-8 с данными в формате JSON}

Таким образом, сообщения клиент-сервер могут быть представлены следующими типами:

struct ActionMessage
{
    Action actionCode;
    size_t dataLength;
    char data[];
}

struct ResposeMessage
{
    Result result;
    size_t dataLength;
    char data[];
}



ДЕЙСТВИЕ LOGIN
Это сообщение о действии должно быть первым в «диалоге» клиент-сервер.

Сервер ожидает получить следующие обязательные значения:
name - имя игрока

Также следующие значения не обязательны:

password - пароль игрока, используемый для проверки соединения, если игрок с тем же именем пытается соединиться с другим паролем - вход будет отклонен
game - название игры (используйте его для подключения к существующей игре)
num_turns - количество ходов игры, по умолчанию: -1 (если num_turns <1, это означает, что игра безлимитна)
num_players - количество игроков в игре, по умолчанию: 1

Пример: запрос на вход
b'\x01\x00\x00\x00\x10\x00\x00\x00{"name":"Boris"}'

|action|msg length|msg             |
|------|----------|----------------|
|1     |16        |{"name":"Boris"}|

Пример: ответное сообщение LOGIN
{
    "home": {
        "idx": 1,
        "post_idx": 1
    },
    "idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
    "in_game": true,
    "name": "Boris",
    "rating": 0,
    "town": {
        "armor": 100,
        "armor_capacity": 200,
        "events": [],
        "idx": 1,
        "level": 1,
        "name": "Minsk",
        "next_level_price": 100,
        "player_idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
        "point_idx": 1,
        "population": 1,
        "population_capacity": 10,
        "product": 200,
        "product_capacity": 200,
        "train_cooldown": 2,
        "type": 1
    },
    "trains": [
        {
            "cooldown": 0,
            "events": [],
            "fuel": 400,
            "fuel_capacity": 400,
            "fuel_consumption": 1,
            "goods": 0,
            "goods_capacity": 40,
            "goods_type": null,
            "idx": 1,
            "level": 1,
            "line_idx": 1,
            "next_level_price": 40,
            "player_idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
            "position": 0,
            "speed": 0
        },
        ...
    ]
}

Некоторые поля из ответа LOGIN:

home.idx - индекс "домашней" точки на карте		!?!?
home.post_idx -  индекс "домашнего" здания на карте   !?!?
idx - уникальный индекс игрока
name - имя игрока
rating - рейтинг игрока, показывает его прогресс в игре
town - данные города 
trains - список поездов принадлежащих игроку



ДЕЙСТВИЕ PLAYER
Это действие счиитывает информацию об игроке. Схема ответного сообщения совпадает с ответом при входе в систему.
Действие не требует никаких данных.

Пример: PLAYER request
b'\x06\x00\x00\x00\x00\x00\x00\x00'

|action|msg length|msg|
|------|----------|---|
|6     |0         |   |

Пример: ответное сообщение PLAYER
{
    "home": {
        "idx": 1,
        "post_idx": 1
    },
    "idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
    "in_game": true,
    "name": "Boris",
    "rating": 0,
    "town": {
        "armor": 100,
        "armor_capacity": 200,
        "events": [],
        "idx": 1,
        "level": 1,
        "name": "Minsk",
        "next_level_price": 100,
        "player_idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
        "point_idx": 1,
        "population": 1,
        "population_capacity": 10,
        "product": 200,
        "product_capacity": 200,
        "train_cooldown": 2,
        "type": 1
    },
    "trains": [
        {
            "cooldown": 0,
            "events": [],
            "fuel": 400,
            "fuel_capacity": 400,
            "fuel_consumption": 1,
            "goods": 0,
            "goods_capacity": 40,
            "goods_type": null,
            "idx": 1,
            "level": 1,
            "line_idx": 1,
            "next_level_price": 40,
            "player_idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
            "position": 0,
            "speed": 0
        },
        ...
    ]
}



Действие LOGOUT
Это действие закрывает соединение.
Действие не требует никаких данных.

Пример: запрос LOGOUT
b'\x02\x00\x00\x00\x00\x00\x00\x00'

|action|msg length|msg|
|------|----------|---|
|2     |0         |   |



MAP action
Это действие читает игровую карту. Карта игры разделена на слои:

Слой 0 - статические объекты: 'idx', 'name', 'points', 'lines'
Слой 1 - динамические объекты: 'idx', 'posts', 'trains', 'ratings'
Слой 10 - координаты точек: 'idx', 'size', 'coordinates'

Сервер ожидает получить следующие обязательные значения:
layer - номер слоя карты

Пример: запрос MAP
b'\x02\x00\x00\x00\x0b\x00\x00\x00{"layer":0}'

|action|msg length|msg        |
|------|----------|-----------|
|10    |11        |{"layer":0}|

Пример: ответное сообщение MAP (для уровня 0)
{
    "idx": 1,
    "lines": [
        {
            "idx": 192,
            "length": 1,
            "points": [
                112,
                107
            ]
        },
        {
            "idx": 193,
            "length": 2,
            "points": [
                101,
                102
            ]
        },
        ...
    ],
    "name": "map01",
    "points": [
        {
            "idx": 101,
            "post_idx": 13
        },
        {
            "idx": 102,
            "post_idx": null
        },
        ...
    ]
}

Пример: ответное сообщение MAP (для уровня 1)
{
    "idx": 1,
    "posts": [
        {
            "events": [],
            "idx": 17,
            "name": "market-small",
            "point_idx": 107,
            "product": 5,
            "product_capacity": 5,
            "replenishment": 1,
            "type": 2
        },
        {
            "armor": 3,
            "armor_capacity": 200,
            "events": [],
            "idx": 13,
            "level": 1,
            "name": "Minsk",
            "next_level_price": 100,
            "player_idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
            "point_idx": 101,
            "population": 3,
            "population_capacity": 10,
            "product": 60,
            "product_capacity": 200,
            "train_cooldown": 2,
            "type": 1
        },
        {
            "armor": 48,
            "armor_capacity": 48,
            "events": [],
            "idx": 18,
            "name": "storage-big",
            "point_idx": 106,
            "replenishment": 2,
            "type": 3
        },
        ...
    ],
    "ratings": {
        "a33dc107-04ab-4039-9578-1dccd00867d1": {
            "idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
            "name": "Boris",
            "rating": 0
        }
    },
    "trains": [
        {
            "cooldown": 0,
            "events": [],
            "fuel": 400,
            "fuel_capacity": 400,
            "fuel_consumption": 1,
            "goods": 0,
            "goods_capacity": 40,
            "goods_type": null,
            "idx": 1,
            "level": 1,
            "line_idx": 193,
            "next_level_price": 40,
            "player_idx": "a33dc107-04ab-4039-9578-1dccd00867d1",
            "position": 0,
            "speed": 0
        },
        ...
    ]
}

Каждое здание имеет следующие ключевые поля:
idx - уникальный индекс здания
name - название здания
type - тип здания

Каждый поезд имеет следующие ключевые поля:
idx - уникальный индекс поезда
line_idx - индекс линии, в которой движется поезд в текущий момент
player_idx - индекс игрока, который является владельцем поезда
position - позиция поезда на текущей линии
speed - скорость поезда

Поле ratings содержит рейтинги всех игроков в игре. Рейтинг пересчитывается на каждом ходу.

Пример: ответное сообщение MAP (для уровня 10)
{
    "coordinates": [
        {
            "idx": 101,
            "x": 75,
            "y": 16
        },
        {
            "idx": 102,
            "x": 250,
            "y": 16
        },
        ...
    ],
    "idx": 2,
    "size": [
        330,
        248
    ]
}

Слой 10 содержит координаты для всех точек на карте. Также слой 10 содержит размер карты.

Каждый элемент в coordinates включает в себя:
idx - индекс точки
х - координата х 
y - координата y

Размер поля - это массив из двух целых чисел: ширина и высота .



Действие MOVE
Это действие перемещает поезд на игровой карте: меняет скорость, направление, линию.

Сервер ожидает получить следующие обязательные значения:
line_idx - индекс линии, на которой поезд должен быть размещен на следующем ходу
speed - скорость поезда, возможные значения:
0 - поезд будет остановлен
1 - поезд будет двигаться в положительном направлении
-1 - поезд будет двигаться в отрицательном направлении
train_idx - индекс поезда

Пример: запрос MOVE
b'\x03\x00\x00\x00(\x00\x00\x00{"line_idx":193,"speed":1,"train_idx":1}'

|action|msg length|msg                                     |
|------|----------|----------------------------------------|
|3     |40        |{"line_idx":193,"speed":1,"train_idx":1}|



Действие UPGRADE
Это действие улучшает поезда и здания до следующего уровня.

Сервер ожидает получить следующие обязательные значения:
posts - список с индексами зданий для улучшения
trains - список с индексами поездов для улучшения

Пример: запрос UPGRADE
b'\x04\x00\x00\x00\x19\x00\x00\x00{"posts":[],"trains":[1]}'

|action|msg length|msg                      |
|------|----------|-------------------------|
|4     |25        |{"posts":[],"trains":[1]}|



Действие TURN
Это действие необходимо для форсирования следующего хода игры, оно позволяет вам не ждать игрового времени и играть быстрее.
Время игры равняется 10 секундам.
Действие не требует никаких данных.

Пример: запрос TURN
b'\x05\x00\x00\x00\x00\x00\x00\x00'

|action|msg length|msg|
|------|----------|---|
|5     |0         |   |



Действие GAMES
Это действие считывает информацию о существующих играх, которые еще не закончены.
Игра может иметь следующие состояния:

enum GameState
{
    INIT = 1,
    RUN = 2,
    FINISHED = 3
}
Действие GAMES не требует никаких данных.

Пример: запрос GAMES
b'\x07\x00\x00\x00\x00\x00\x00\x00'

|action|msg length|msg|
|------|----------|---|
|7     |0         |   |

Пример: ответное сообщение GAMES
{
    "games": [
        {
            "name": "Try to win me!",
            "num_players": 4,
            "num_turns": 1000,
            "state": 2
        }
    ]
}